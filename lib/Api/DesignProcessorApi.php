<?php
/**
 * DesignProcessorApi
 * PHP version 7.2
 *
 * @category Class
 * @package  Aurigma\AssetProcessor
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * AssetProcessor API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Aurigma\AssetProcessor\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Aurigma\AssetProcessor\ApiException;
use Aurigma\AssetProcessor\Configuration;
use Aurigma\AssetProcessor\HeaderSelector;
use Aurigma\AssetProcessor\ObjectSerializer;

/**
 * DesignProcessorApi Class Doc Comment
 *
 * @category Class
 * @package  Aurigma\AssetProcessor
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DesignProcessorApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation designProcessorCheck
     *
     * Checks if design taken from storage has any problems
     *
     * @param  string $id Design entity unique identifier (required)
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \Aurigma\AssetProcessor\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aurigma\AssetProcessor\Model\DesignProblemInfo|\Aurigma\AssetProcessor\Model\ProblemDetails
     */
    public function designProcessorCheck($id, $tenant_id = null)
    {
        list($response) = $this->designProcessorCheckWithHttpInfo($id, $tenant_id);
        return $response;
    }

    /**
     * Operation designProcessorCheckWithHttpInfo
     *
     * Checks if design taken from storage has any problems
     *
     * @param  string $id Design entity unique identifier (required)
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \Aurigma\AssetProcessor\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aurigma\AssetProcessor\Model\DesignProblemInfo|\Aurigma\AssetProcessor\Model\ProblemDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function designProcessorCheckWithHttpInfo($id, $tenant_id = null)
    {
        $request = $this->designProcessorCheckRequest($id, $tenant_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Aurigma\AssetProcessor\Model\DesignProblemInfo' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\AssetProcessor\Model\DesignProblemInfo', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Aurigma\AssetProcessor\Model\ProblemDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\AssetProcessor\Model\ProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Aurigma\AssetProcessor\Model\DesignProblemInfo';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\AssetProcessor\Model\DesignProblemInfo',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\AssetProcessor\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation designProcessorCheckAsync
     *
     * Checks if design taken from storage has any problems
     *
     * @param  string $id Design entity unique identifier (required)
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function designProcessorCheckAsync($id, $tenant_id = null)
    {
        return $this->designProcessorCheckAsyncWithHttpInfo($id, $tenant_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation designProcessorCheckAsyncWithHttpInfo
     *
     * Checks if design taken from storage has any problems
     *
     * @param  string $id Design entity unique identifier (required)
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function designProcessorCheckAsyncWithHttpInfo($id, $tenant_id = null)
    {
        $returnType = '\Aurigma\AssetProcessor\Model\DesignProblemInfo';
        $request = $this->designProcessorCheckRequest($id, $tenant_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'designProcessorCheck'
     *
     * @param  string $id Design entity unique identifier (required)
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function designProcessorCheckRequest($id, $tenant_id = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling designProcessorCheck'
            );
        }

        $resourcePath = '/api/processor/v1/designs/{id}/check';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($tenant_id !== null) {
            if('form' === 'form' && is_array($tenant_id)) {
                foreach($tenant_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tenantId'] = $tenant_id;
            }
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        // aurigmafix 6
                        if (gettype($formParamValueItem) === 'object') {
                            if (!($formParamValueItem instanceof StreamInterface 
                            || $formParamValueItem instanceof \Iterator 
                            || method_exists($formParamValueItem, '__toString'))) {
                                $formParamValueItem = json_encode($formParamValueItem);
                            }
                        } 
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation designProcessorCreateBlankDesign
     *
     * Creates design by product model and saves it to storage
     *
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  \Aurigma\AssetProcessor\Model\CreateBlankDesignModel $create_blank_design_model Operation parameters (optional)
     *
     * @throws \Aurigma\AssetProcessor\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aurigma\AssetProcessor\Model\DesignDto|\Aurigma\AssetProcessor\Model\NameConflictDto
     */
    public function designProcessorCreateBlankDesign($tenant_id = null, $create_blank_design_model = null)
    {
        list($response) = $this->designProcessorCreateBlankDesignWithHttpInfo($tenant_id, $create_blank_design_model);
        return $response;
    }

    /**
     * Operation designProcessorCreateBlankDesignWithHttpInfo
     *
     * Creates design by product model and saves it to storage
     *
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  \Aurigma\AssetProcessor\Model\CreateBlankDesignModel $create_blank_design_model Operation parameters (optional)
     *
     * @throws \Aurigma\AssetProcessor\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aurigma\AssetProcessor\Model\DesignDto|\Aurigma\AssetProcessor\Model\NameConflictDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function designProcessorCreateBlankDesignWithHttpInfo($tenant_id = null, $create_blank_design_model = null)
    {
        $request = $this->designProcessorCreateBlankDesignRequest($tenant_id, $create_blank_design_model);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\Aurigma\AssetProcessor\Model\DesignDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\AssetProcessor\Model\DesignDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Aurigma\AssetProcessor\Model\NameConflictDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\AssetProcessor\Model\NameConflictDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Aurigma\AssetProcessor\Model\DesignDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\AssetProcessor\Model\DesignDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\AssetProcessor\Model\NameConflictDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation designProcessorCreateBlankDesignAsync
     *
     * Creates design by product model and saves it to storage
     *
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  \Aurigma\AssetProcessor\Model\CreateBlankDesignModel $create_blank_design_model Operation parameters (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function designProcessorCreateBlankDesignAsync($tenant_id = null, $create_blank_design_model = null)
    {
        return $this->designProcessorCreateBlankDesignAsyncWithHttpInfo($tenant_id, $create_blank_design_model)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation designProcessorCreateBlankDesignAsyncWithHttpInfo
     *
     * Creates design by product model and saves it to storage
     *
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  \Aurigma\AssetProcessor\Model\CreateBlankDesignModel $create_blank_design_model Operation parameters (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function designProcessorCreateBlankDesignAsyncWithHttpInfo($tenant_id = null, $create_blank_design_model = null)
    {
        $returnType = '\Aurigma\AssetProcessor\Model\DesignDto';
        $request = $this->designProcessorCreateBlankDesignRequest($tenant_id, $create_blank_design_model);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'designProcessorCreateBlankDesign'
     *
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  \Aurigma\AssetProcessor\Model\CreateBlankDesignModel $create_blank_design_model Operation parameters (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function designProcessorCreateBlankDesignRequest($tenant_id = null, $create_blank_design_model = null)
    {

        $resourcePath = '/api/processor/v1/designs/blank';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($tenant_id !== null) {
            if('form' === 'form' && is_array($tenant_id)) {
                foreach($tenant_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tenantId'] = $tenant_id;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($create_blank_design_model)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($create_blank_design_model));
            } else {
                $httpBody = $create_blank_design_model;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        // aurigmafix 6
                        if (gettype($formParamValueItem) === 'object') {
                            if (!($formParamValueItem instanceof StreamInterface 
                            || $formParamValueItem instanceof \Iterator 
                            || method_exists($formParamValueItem, '__toString'))) {
                                $formParamValueItem = json_encode($formParamValueItem);
                            }
                        } 
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation designProcessorEmbedDataSchema
     *
     * Embeds linked data schema to the design file
     *
     * @param  string $id Design entity unique identifier (required)
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \Aurigma\AssetProcessor\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aurigma\AssetProcessor\Model\DesignDto|\Aurigma\AssetProcessor\Model\ProblemDetails
     */
    public function designProcessorEmbedDataSchema($id, $tenant_id = null)
    {
        list($response) = $this->designProcessorEmbedDataSchemaWithHttpInfo($id, $tenant_id);
        return $response;
    }

    /**
     * Operation designProcessorEmbedDataSchemaWithHttpInfo
     *
     * Embeds linked data schema to the design file
     *
     * @param  string $id Design entity unique identifier (required)
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \Aurigma\AssetProcessor\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aurigma\AssetProcessor\Model\DesignDto|\Aurigma\AssetProcessor\Model\ProblemDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function designProcessorEmbedDataSchemaWithHttpInfo($id, $tenant_id = null)
    {
        $request = $this->designProcessorEmbedDataSchemaRequest($id, $tenant_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Aurigma\AssetProcessor\Model\DesignDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\AssetProcessor\Model\DesignDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Aurigma\AssetProcessor\Model\ProblemDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\AssetProcessor\Model\ProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Aurigma\AssetProcessor\Model\DesignDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\AssetProcessor\Model\DesignDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\AssetProcessor\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation designProcessorEmbedDataSchemaAsync
     *
     * Embeds linked data schema to the design file
     *
     * @param  string $id Design entity unique identifier (required)
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function designProcessorEmbedDataSchemaAsync($id, $tenant_id = null)
    {
        return $this->designProcessorEmbedDataSchemaAsyncWithHttpInfo($id, $tenant_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation designProcessorEmbedDataSchemaAsyncWithHttpInfo
     *
     * Embeds linked data schema to the design file
     *
     * @param  string $id Design entity unique identifier (required)
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function designProcessorEmbedDataSchemaAsyncWithHttpInfo($id, $tenant_id = null)
    {
        $returnType = '\Aurigma\AssetProcessor\Model\DesignDto';
        $request = $this->designProcessorEmbedDataSchemaRequest($id, $tenant_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'designProcessorEmbedDataSchema'
     *
     * @param  string $id Design entity unique identifier (required)
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function designProcessorEmbedDataSchemaRequest($id, $tenant_id = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling designProcessorEmbedDataSchema'
            );
        }

        $resourcePath = '/api/processor/v1/designs/{id}/schema/embed';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($tenant_id !== null) {
            if('form' === 'form' && is_array($tenant_id)) {
                foreach($tenant_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tenantId'] = $tenant_id;
            }
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        // aurigmafix 6
                        if (gettype($formParamValueItem) === 'object') {
                            if (!($formParamValueItem instanceof StreamInterface 
                            || $formParamValueItem instanceof \Iterator 
                            || method_exists($formParamValueItem, '__toString'))) {
                                $formParamValueItem = json_encode($formParamValueItem);
                            }
                        } 
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation designProcessorExportDesign
     *
     * Exports design file
     *
     * @param  string $id Design entity unique identifier (required)
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \Aurigma\AssetProcessor\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject|\Aurigma\AssetProcessor\Model\ProblemDetails
     */
    public function designProcessorExportDesign($id, $tenant_id = null)
    {
        list($response) = $this->designProcessorExportDesignWithHttpInfo($id, $tenant_id);
        return $response;
    }

    /**
     * Operation designProcessorExportDesignWithHttpInfo
     *
     * Exports design file
     *
     * @param  string $id Design entity unique identifier (required)
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \Aurigma\AssetProcessor\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject|\Aurigma\AssetProcessor\Model\ProblemDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function designProcessorExportDesignWithHttpInfo($id, $tenant_id = null)
    {
        $request = $this->designProcessorExportDesignRequest($id, $tenant_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Aurigma\AssetProcessor\Model\ProblemDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\AssetProcessor\Model\ProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SplFileObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\AssetProcessor\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation designProcessorExportDesignAsync
     *
     * Exports design file
     *
     * @param  string $id Design entity unique identifier (required)
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function designProcessorExportDesignAsync($id, $tenant_id = null)
    {
        return $this->designProcessorExportDesignAsyncWithHttpInfo($id, $tenant_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation designProcessorExportDesignAsyncWithHttpInfo
     *
     * Exports design file
     *
     * @param  string $id Design entity unique identifier (required)
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function designProcessorExportDesignAsyncWithHttpInfo($id, $tenant_id = null)
    {
        $returnType = '\SplFileObject';
        $request = $this->designProcessorExportDesignRequest($id, $tenant_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'designProcessorExportDesign'
     *
     * @param  string $id Design entity unique identifier (required)
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function designProcessorExportDesignRequest($id, $tenant_id = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling designProcessorExportDesign'
            );
        }

        $resourcePath = '/api/processor/v1/designs/{id}/export';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($tenant_id !== null) {
            if('form' === 'form' && is_array($tenant_id)) {
                foreach($tenant_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tenantId'] = $tenant_id;
            }
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/octet-stream']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/octet-stream'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        // aurigmafix 6
                        if (gettype($formParamValueItem) === 'object') {
                            if (!($formParamValueItem instanceof StreamInterface 
                            || $formParamValueItem instanceof \Iterator 
                            || method_exists($formParamValueItem, '__toString'))) {
                                $formParamValueItem = json_encode($formParamValueItem);
                            }
                        } 
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation designProcessorExtractDataSchema
     *
     * Extracts data schema from design file and saves it to the specified folder
     *
     * @param  string $id Design entity unique identifier (required)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  \Aurigma\AssetProcessor\Model\DesignExtractDataSchemaModel $design_extract_data_schema_model Extract data schema operation parameters (optional)
     *
     * @throws \Aurigma\AssetProcessor\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function designProcessorExtractDataSchema($id, $tenant_id = null, $design_extract_data_schema_model = null)
    {
        $this->designProcessorExtractDataSchemaWithHttpInfo($id, $tenant_id, $design_extract_data_schema_model);
    }

    /**
     * Operation designProcessorExtractDataSchemaWithHttpInfo
     *
     * Extracts data schema from design file and saves it to the specified folder
     *
     * @param  string $id Design entity unique identifier (required)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  \Aurigma\AssetProcessor\Model\DesignExtractDataSchemaModel $design_extract_data_schema_model Extract data schema operation parameters (optional)
     *
     * @throws \Aurigma\AssetProcessor\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function designProcessorExtractDataSchemaWithHttpInfo($id, $tenant_id = null, $design_extract_data_schema_model = null)
    {
        $request = $this->designProcessorExtractDataSchemaRequest($id, $tenant_id, $design_extract_data_schema_model);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\AssetProcessor\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation designProcessorExtractDataSchemaAsync
     *
     * Extracts data schema from design file and saves it to the specified folder
     *
     * @param  string $id Design entity unique identifier (required)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  \Aurigma\AssetProcessor\Model\DesignExtractDataSchemaModel $design_extract_data_schema_model Extract data schema operation parameters (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function designProcessorExtractDataSchemaAsync($id, $tenant_id = null, $design_extract_data_schema_model = null)
    {
        return $this->designProcessorExtractDataSchemaAsyncWithHttpInfo($id, $tenant_id, $design_extract_data_schema_model)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation designProcessorExtractDataSchemaAsyncWithHttpInfo
     *
     * Extracts data schema from design file and saves it to the specified folder
     *
     * @param  string $id Design entity unique identifier (required)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  \Aurigma\AssetProcessor\Model\DesignExtractDataSchemaModel $design_extract_data_schema_model Extract data schema operation parameters (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function designProcessorExtractDataSchemaAsyncWithHttpInfo($id, $tenant_id = null, $design_extract_data_schema_model = null)
    {
        $returnType = '';
        $request = $this->designProcessorExtractDataSchemaRequest($id, $tenant_id, $design_extract_data_schema_model);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'designProcessorExtractDataSchema'
     *
     * @param  string $id Design entity unique identifier (required)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  \Aurigma\AssetProcessor\Model\DesignExtractDataSchemaModel $design_extract_data_schema_model Extract data schema operation parameters (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function designProcessorExtractDataSchemaRequest($id, $tenant_id = null, $design_extract_data_schema_model = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling designProcessorExtractDataSchema'
            );
        }

        $resourcePath = '/api/processor/v1/designs/{id}/schema/extract';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($tenant_id !== null) {
            if('form' === 'form' && is_array($tenant_id)) {
                foreach($tenant_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tenantId'] = $tenant_id;
            }
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($design_extract_data_schema_model)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($design_extract_data_schema_model));
            } else {
                $httpBody = $design_extract_data_schema_model;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        // aurigmafix 6
                        if (gettype($formParamValueItem) === 'object') {
                            if (!($formParamValueItem instanceof StreamInterface 
                            || $formParamValueItem instanceof \Iterator 
                            || method_exists($formParamValueItem, '__toString'))) {
                                $formParamValueItem = json_encode($formParamValueItem);
                            }
                        } 
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation designProcessorGetDepositPhotos
     *
     * Return information about inserted images from DepositPhotos
     *
     * @param  string $id Design entity unique identifier (required)
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \Aurigma\AssetProcessor\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aurigma\AssetProcessor\Model\ImageDepositPhoto[]|\Aurigma\AssetProcessor\Model\ProblemDetails
     */
    public function designProcessorGetDepositPhotos($id, $tenant_id = null)
    {
        list($response) = $this->designProcessorGetDepositPhotosWithHttpInfo($id, $tenant_id);
        return $response;
    }

    /**
     * Operation designProcessorGetDepositPhotosWithHttpInfo
     *
     * Return information about inserted images from DepositPhotos
     *
     * @param  string $id Design entity unique identifier (required)
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \Aurigma\AssetProcessor\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aurigma\AssetProcessor\Model\ImageDepositPhoto[]|\Aurigma\AssetProcessor\Model\ProblemDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function designProcessorGetDepositPhotosWithHttpInfo($id, $tenant_id = null)
    {
        $request = $this->designProcessorGetDepositPhotosRequest($id, $tenant_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Aurigma\AssetProcessor\Model\ImageDepositPhoto[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\AssetProcessor\Model\ImageDepositPhoto[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Aurigma\AssetProcessor\Model\ProblemDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\AssetProcessor\Model\ProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Aurigma\AssetProcessor\Model\ImageDepositPhoto[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\AssetProcessor\Model\ImageDepositPhoto[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\AssetProcessor\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation designProcessorGetDepositPhotosAsync
     *
     * Return information about inserted images from DepositPhotos
     *
     * @param  string $id Design entity unique identifier (required)
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function designProcessorGetDepositPhotosAsync($id, $tenant_id = null)
    {
        return $this->designProcessorGetDepositPhotosAsyncWithHttpInfo($id, $tenant_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation designProcessorGetDepositPhotosAsyncWithHttpInfo
     *
     * Return information about inserted images from DepositPhotos
     *
     * @param  string $id Design entity unique identifier (required)
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function designProcessorGetDepositPhotosAsyncWithHttpInfo($id, $tenant_id = null)
    {
        $returnType = '\Aurigma\AssetProcessor\Model\ImageDepositPhoto[]';
        $request = $this->designProcessorGetDepositPhotosRequest($id, $tenant_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'designProcessorGetDepositPhotos'
     *
     * @param  string $id Design entity unique identifier (required)
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function designProcessorGetDepositPhotosRequest($id, $tenant_id = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling designProcessorGetDepositPhotos'
            );
        }

        $resourcePath = '/api/processor/v1/designs/{id}/depositphotos';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($tenant_id !== null) {
            if('form' === 'form' && is_array($tenant_id)) {
                foreach($tenant_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tenantId'] = $tenant_id;
            }
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        // aurigmafix 6
                        if (gettype($formParamValueItem) === 'object') {
                            if (!($formParamValueItem instanceof StreamInterface 
                            || $formParamValueItem instanceof \Iterator 
                            || method_exists($formParamValueItem, '__toString'))) {
                                $formParamValueItem = json_encode($formParamValueItem);
                            }
                        } 
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation designProcessorImportDesign
     *
     * Imports design from source file and saves it to storage.
     *
     * @param  \SplFileObject $source_file Design source file (required)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $design_params_name Design name (optional)
     * @param  string $design_params_path Design location (folder path) (optional)
     * @param  mixed $design_params_custom_fields design_params_custom_fields (optional)
     * @param  bool $preview_settings_make_preview Force make preview (optional)
     * @param  string $preview_settings_namespace Preview namespace (optional)
     * @param  string $preview_settings_name Preview name (optional)
     * @param  int $preview_settings_width Preview image width (optional)
     * @param  int $preview_settings_height Preview image heigth (optional)
     * @param  bool $preview_settings_stub Preview stub contnent switcher  Indicates whether to show stub content in preview (optional)
     * @param  \Aurigma\AssetProcessor\Model\DesignPreviewFormat $preview_settings_format preview_settings_format (optional)
     *
     * @throws \Aurigma\AssetProcessor\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aurigma\AssetProcessor\Model\DesignDto|\Aurigma\AssetProcessor\Model\DesignImportConflictDto
     */
    public function designProcessorImportDesign($source_file, $tenant_id = null, $design_params_name = null, $design_params_path = null, $design_params_custom_fields = null, $preview_settings_make_preview = null, $preview_settings_namespace = null, $preview_settings_name = null, $preview_settings_width = null, $preview_settings_height = null, $preview_settings_stub = null, $preview_settings_format = null)
    {
        list($response) = $this->designProcessorImportDesignWithHttpInfo($source_file, $tenant_id, $design_params_name, $design_params_path, $design_params_custom_fields, $preview_settings_make_preview, $preview_settings_namespace, $preview_settings_name, $preview_settings_width, $preview_settings_height, $preview_settings_stub, $preview_settings_format);
        return $response;
    }

    /**
     * Operation designProcessorImportDesignWithHttpInfo
     *
     * Imports design from source file and saves it to storage.
     *
     * @param  \SplFileObject $source_file Design source file (required)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $design_params_name Design name (optional)
     * @param  string $design_params_path Design location (folder path) (optional)
     * @param  mixed $design_params_custom_fields (optional)
     * @param  bool $preview_settings_make_preview Force make preview (optional)
     * @param  string $preview_settings_namespace Preview namespace (optional)
     * @param  string $preview_settings_name Preview name (optional)
     * @param  int $preview_settings_width Preview image width (optional)
     * @param  int $preview_settings_height Preview image heigth (optional)
     * @param  bool $preview_settings_stub Preview stub contnent switcher  Indicates whether to show stub content in preview (optional)
     * @param  \Aurigma\AssetProcessor\Model\DesignPreviewFormat $preview_settings_format (optional)
     *
     * @throws \Aurigma\AssetProcessor\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aurigma\AssetProcessor\Model\DesignDto|\Aurigma\AssetProcessor\Model\DesignImportConflictDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function designProcessorImportDesignWithHttpInfo($source_file, $tenant_id = null, $design_params_name = null, $design_params_path = null, $design_params_custom_fields = null, $preview_settings_make_preview = null, $preview_settings_namespace = null, $preview_settings_name = null, $preview_settings_width = null, $preview_settings_height = null, $preview_settings_stub = null, $preview_settings_format = null)
    {
        $request = $this->designProcessorImportDesignRequest($source_file, $tenant_id, $design_params_name, $design_params_path, $design_params_custom_fields, $preview_settings_make_preview, $preview_settings_namespace, $preview_settings_name, $preview_settings_width, $preview_settings_height, $preview_settings_stub, $preview_settings_format);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\Aurigma\AssetProcessor\Model\DesignDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\AssetProcessor\Model\DesignDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Aurigma\AssetProcessor\Model\DesignImportConflictDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\AssetProcessor\Model\DesignImportConflictDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Aurigma\AssetProcessor\Model\DesignDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\AssetProcessor\Model\DesignDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\AssetProcessor\Model\DesignImportConflictDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation designProcessorImportDesignAsync
     *
     * Imports design from source file and saves it to storage.
     *
     * @param  \SplFileObject $source_file Design source file (required)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $design_params_name Design name (optional)
     * @param  string $design_params_path Design location (folder path) (optional)
     * @param  mixed $design_params_custom_fields (optional)
     * @param  bool $preview_settings_make_preview Force make preview (optional)
     * @param  string $preview_settings_namespace Preview namespace (optional)
     * @param  string $preview_settings_name Preview name (optional)
     * @param  int $preview_settings_width Preview image width (optional)
     * @param  int $preview_settings_height Preview image heigth (optional)
     * @param  bool $preview_settings_stub Preview stub contnent switcher  Indicates whether to show stub content in preview (optional)
     * @param  \Aurigma\AssetProcessor\Model\DesignPreviewFormat $preview_settings_format (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function designProcessorImportDesignAsync($source_file, $tenant_id = null, $design_params_name = null, $design_params_path = null, $design_params_custom_fields = null, $preview_settings_make_preview = null, $preview_settings_namespace = null, $preview_settings_name = null, $preview_settings_width = null, $preview_settings_height = null, $preview_settings_stub = null, $preview_settings_format = null)
    {
        return $this->designProcessorImportDesignAsyncWithHttpInfo($source_file, $tenant_id, $design_params_name, $design_params_path, $design_params_custom_fields, $preview_settings_make_preview, $preview_settings_namespace, $preview_settings_name, $preview_settings_width, $preview_settings_height, $preview_settings_stub, $preview_settings_format)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation designProcessorImportDesignAsyncWithHttpInfo
     *
     * Imports design from source file and saves it to storage.
     *
     * @param  \SplFileObject $source_file Design source file (required)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $design_params_name Design name (optional)
     * @param  string $design_params_path Design location (folder path) (optional)
     * @param  mixed $design_params_custom_fields (optional)
     * @param  bool $preview_settings_make_preview Force make preview (optional)
     * @param  string $preview_settings_namespace Preview namespace (optional)
     * @param  string $preview_settings_name Preview name (optional)
     * @param  int $preview_settings_width Preview image width (optional)
     * @param  int $preview_settings_height Preview image heigth (optional)
     * @param  bool $preview_settings_stub Preview stub contnent switcher  Indicates whether to show stub content in preview (optional)
     * @param  \Aurigma\AssetProcessor\Model\DesignPreviewFormat $preview_settings_format (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function designProcessorImportDesignAsyncWithHttpInfo($source_file, $tenant_id = null, $design_params_name = null, $design_params_path = null, $design_params_custom_fields = null, $preview_settings_make_preview = null, $preview_settings_namespace = null, $preview_settings_name = null, $preview_settings_width = null, $preview_settings_height = null, $preview_settings_stub = null, $preview_settings_format = null)
    {
        $returnType = '\Aurigma\AssetProcessor\Model\DesignDto';
        $request = $this->designProcessorImportDesignRequest($source_file, $tenant_id, $design_params_name, $design_params_path, $design_params_custom_fields, $preview_settings_make_preview, $preview_settings_namespace, $preview_settings_name, $preview_settings_width, $preview_settings_height, $preview_settings_stub, $preview_settings_format);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'designProcessorImportDesign'
     *
     * @param  \SplFileObject $source_file Design source file (required)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $design_params_name Design name (optional)
     * @param  string $design_params_path Design location (folder path) (optional)
     * @param  mixed $design_params_custom_fields (optional)
     * @param  bool $preview_settings_make_preview Force make preview (optional)
     * @param  string $preview_settings_namespace Preview namespace (optional)
     * @param  string $preview_settings_name Preview name (optional)
     * @param  int $preview_settings_width Preview image width (optional)
     * @param  int $preview_settings_height Preview image heigth (optional)
     * @param  bool $preview_settings_stub Preview stub contnent switcher  Indicates whether to show stub content in preview (optional)
     * @param  \Aurigma\AssetProcessor\Model\DesignPreviewFormat $preview_settings_format (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function designProcessorImportDesignRequest($source_file, $tenant_id = null, $design_params_name = null, $design_params_path = null, $design_params_custom_fields = null, $preview_settings_make_preview = null, $preview_settings_namespace = null, $preview_settings_name = null, $preview_settings_width = null, $preview_settings_height = null, $preview_settings_stub = null, $preview_settings_format = null)
    {
        // verify the required parameter 'source_file' is set
        if ($source_file === null || (is_array($source_file) && count($source_file) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $source_file when calling designProcessorImportDesign'
            );
        }
        if ($design_params_name !== null && !preg_match("/[^\/:*?\"<>|]*/", $design_params_name)) {
            throw new \InvalidArgumentException("invalid value for \"design_params_name\" when calling DesignProcessorApi.designProcessorImportDesign, must conform to the pattern /[^\/:*?\"<>|]*/.");
        }


        $resourcePath = '/api/processor/v1/designs/import';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($tenant_id !== null) {
            if('form' === 'form' && is_array($tenant_id)) {
                foreach($tenant_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tenantId'] = $tenant_id;
            }
        }



        // form params
        if ($design_params_name !== null) {
            $formParams['designParams.name'] = ObjectSerializer::toFormValue($design_params_name);
        }
        // form params
        if ($design_params_path !== null) {
            $formParams['designParams.path'] = ObjectSerializer::toFormValue($design_params_path);
        }
        // form params
        if ($design_params_custom_fields !== null) {
            $formParams['designParams.customFields'] = ObjectSerializer::toFormValue($design_params_custom_fields);
        }
        // form params
        if ($preview_settings_make_preview !== null) {
            $formParams['previewSettings.makePreview'] = ObjectSerializer::toFormValue($preview_settings_make_preview);
        }
        // form params
        if ($preview_settings_namespace !== null) {
            $formParams['previewSettings.namespace'] = ObjectSerializer::toFormValue($preview_settings_namespace);
        }
        // form params
        if ($preview_settings_name !== null) {
            $formParams['previewSettings.name'] = ObjectSerializer::toFormValue($preview_settings_name);
        }
        // form params
        if ($preview_settings_width !== null) {
            $formParams['previewSettings.width'] = ObjectSerializer::toFormValue($preview_settings_width);
        }
        // form params
        if ($preview_settings_height !== null) {
            $formParams['previewSettings.height'] = ObjectSerializer::toFormValue($preview_settings_height);
        }
        // form params
        if ($preview_settings_stub !== null) {
            $formParams['previewSettings.stub'] = ObjectSerializer::toFormValue($preview_settings_stub);
        }
        // form params
        if ($preview_settings_format !== null) {
            $formParams['previewSettings.format'] = ObjectSerializer::toFormValue($preview_settings_format);
        }
        // aurigmafix 5
        $multipart = true;
        // form params
        if ($source_file !== null) {
            $multipart = true;
            $formParams['sourceFile'] = [];
            $paramFiles = is_array($source_file) ? $source_file : [$source_file];
            foreach ($paramFiles as $paramFile) {
                $formParams['sourceFile'][] = \GuzzleHttp\Psr7\try_fopen(
                    ObjectSerializer::toFormValue($paramFile),
                    'rb'
                );
            }
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        // aurigmafix 6
                        if (gettype($formParamValueItem) === 'object') {
                            if (!($formParamValueItem instanceof StreamInterface 
                            || $formParamValueItem instanceof \Iterator 
                            || method_exists($formParamValueItem, '__toString'))) {
                                $formParamValueItem = json_encode($formParamValueItem);
                            }
                        } 
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation designProcessorLinkDataSchema
     *
     * Links data schema to the design file
     *
     * @param  string $id Design entity unique identifier (required)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  \Aurigma\AssetProcessor\Model\DesignLinkDataSchemaModel $design_link_data_schema_model Link schema operation parameters (optional)
     *
     * @throws \Aurigma\AssetProcessor\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aurigma\AssetProcessor\Model\DesignDto|\Aurigma\AssetProcessor\Model\ProblemDetails
     */
    public function designProcessorLinkDataSchema($id, $tenant_id = null, $design_link_data_schema_model = null)
    {
        list($response) = $this->designProcessorLinkDataSchemaWithHttpInfo($id, $tenant_id, $design_link_data_schema_model);
        return $response;
    }

    /**
     * Operation designProcessorLinkDataSchemaWithHttpInfo
     *
     * Links data schema to the design file
     *
     * @param  string $id Design entity unique identifier (required)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  \Aurigma\AssetProcessor\Model\DesignLinkDataSchemaModel $design_link_data_schema_model Link schema operation parameters (optional)
     *
     * @throws \Aurigma\AssetProcessor\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aurigma\AssetProcessor\Model\DesignDto|\Aurigma\AssetProcessor\Model\ProblemDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function designProcessorLinkDataSchemaWithHttpInfo($id, $tenant_id = null, $design_link_data_schema_model = null)
    {
        $request = $this->designProcessorLinkDataSchemaRequest($id, $tenant_id, $design_link_data_schema_model);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Aurigma\AssetProcessor\Model\DesignDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\AssetProcessor\Model\DesignDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Aurigma\AssetProcessor\Model\ProblemDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\AssetProcessor\Model\ProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Aurigma\AssetProcessor\Model\DesignDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\AssetProcessor\Model\DesignDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\AssetProcessor\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation designProcessorLinkDataSchemaAsync
     *
     * Links data schema to the design file
     *
     * @param  string $id Design entity unique identifier (required)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  \Aurigma\AssetProcessor\Model\DesignLinkDataSchemaModel $design_link_data_schema_model Link schema operation parameters (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function designProcessorLinkDataSchemaAsync($id, $tenant_id = null, $design_link_data_schema_model = null)
    {
        return $this->designProcessorLinkDataSchemaAsyncWithHttpInfo($id, $tenant_id, $design_link_data_schema_model)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation designProcessorLinkDataSchemaAsyncWithHttpInfo
     *
     * Links data schema to the design file
     *
     * @param  string $id Design entity unique identifier (required)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  \Aurigma\AssetProcessor\Model\DesignLinkDataSchemaModel $design_link_data_schema_model Link schema operation parameters (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function designProcessorLinkDataSchemaAsyncWithHttpInfo($id, $tenant_id = null, $design_link_data_schema_model = null)
    {
        $returnType = '\Aurigma\AssetProcessor\Model\DesignDto';
        $request = $this->designProcessorLinkDataSchemaRequest($id, $tenant_id, $design_link_data_schema_model);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'designProcessorLinkDataSchema'
     *
     * @param  string $id Design entity unique identifier (required)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  \Aurigma\AssetProcessor\Model\DesignLinkDataSchemaModel $design_link_data_schema_model Link schema operation parameters (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function designProcessorLinkDataSchemaRequest($id, $tenant_id = null, $design_link_data_schema_model = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling designProcessorLinkDataSchema'
            );
        }

        $resourcePath = '/api/processor/v1/designs/{id}/schema/link';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($tenant_id !== null) {
            if('form' === 'form' && is_array($tenant_id)) {
                foreach($tenant_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tenantId'] = $tenant_id;
            }
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($design_link_data_schema_model)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($design_link_data_schema_model));
            } else {
                $httpBody = $design_link_data_schema_model;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        // aurigmafix 6
                        if (gettype($formParamValueItem) === 'object') {
                            if (!($formParamValueItem instanceof StreamInterface 
                            || $formParamValueItem instanceof \Iterator 
                            || method_exists($formParamValueItem, '__toString'))) {
                                $formParamValueItem = json_encode($formParamValueItem);
                            }
                        } 
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation designProcessorPreparePreview
     *
     * Creates preview image for design taken from storage.
     *
     * @param  string $id Source design entity identifier (required)
     * @param  string $namespace Preview namespace (required)
     * @param  string $name Preview name (required)
     * @param  int $width Preview image width (required)
     * @param  int $height Preview image height (required)
     * @param  int $surface_index Design surface index  Indicates which design surface should be used as a source for preview (optional)
     * @param  bool $stub Design Preview stub contnent switcher  Indicates whether to show stub content in preview (optional)
     * @param  \Aurigma\AssetProcessor\Model\DesignPreviewFormat $format Design preview image format (optional)
     * @param  bool $force If set to &#39;true&#39;, new preview prepared, even if preview already existed (optional, default to false)
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \Aurigma\AssetProcessor\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject|\Aurigma\AssetProcessor\Model\ProblemDetails
     */
    public function designProcessorPreparePreview($id, $namespace, $name, $width, $height, $surface_index = null, $stub = null, $format = null, $force = false, $tenant_id = null)
    {
        list($response) = $this->designProcessorPreparePreviewWithHttpInfo($id, $namespace, $name, $width, $height, $surface_index, $stub, $format, $force, $tenant_id);
        return $response;
    }

    /**
     * Operation designProcessorPreparePreviewWithHttpInfo
     *
     * Creates preview image for design taken from storage.
     *
     * @param  string $id Source design entity identifier (required)
     * @param  string $namespace Preview namespace (required)
     * @param  string $name Preview name (required)
     * @param  int $width Preview image width (required)
     * @param  int $height Preview image height (required)
     * @param  int $surface_index Design surface index  Indicates which design surface should be used as a source for preview (optional)
     * @param  bool $stub Design Preview stub contnent switcher  Indicates whether to show stub content in preview (optional)
     * @param  \Aurigma\AssetProcessor\Model\DesignPreviewFormat $format Design preview image format (optional)
     * @param  bool $force If set to &#39;true&#39;, new preview prepared, even if preview already existed (optional, default to false)
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \Aurigma\AssetProcessor\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject|\Aurigma\AssetProcessor\Model\ProblemDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function designProcessorPreparePreviewWithHttpInfo($id, $namespace, $name, $width, $height, $surface_index = null, $stub = null, $format = null, $force = false, $tenant_id = null)
    {
        $request = $this->designProcessorPreparePreviewRequest($id, $namespace, $name, $width, $height, $surface_index, $stub, $format, $force, $tenant_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Aurigma\AssetProcessor\Model\ProblemDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\AssetProcessor\Model\ProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SplFileObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\AssetProcessor\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation designProcessorPreparePreviewAsync
     *
     * Creates preview image for design taken from storage.
     *
     * @param  string $id Source design entity identifier (required)
     * @param  string $namespace Preview namespace (required)
     * @param  string $name Preview name (required)
     * @param  int $width Preview image width (required)
     * @param  int $height Preview image height (required)
     * @param  int $surface_index Design surface index  Indicates which design surface should be used as a source for preview (optional)
     * @param  bool $stub Design Preview stub contnent switcher  Indicates whether to show stub content in preview (optional)
     * @param  \Aurigma\AssetProcessor\Model\DesignPreviewFormat $format Design preview image format (optional)
     * @param  bool $force If set to &#39;true&#39;, new preview prepared, even if preview already existed (optional, default to false)
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function designProcessorPreparePreviewAsync($id, $namespace, $name, $width, $height, $surface_index = null, $stub = null, $format = null, $force = false, $tenant_id = null)
    {
        return $this->designProcessorPreparePreviewAsyncWithHttpInfo($id, $namespace, $name, $width, $height, $surface_index, $stub, $format, $force, $tenant_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation designProcessorPreparePreviewAsyncWithHttpInfo
     *
     * Creates preview image for design taken from storage.
     *
     * @param  string $id Source design entity identifier (required)
     * @param  string $namespace Preview namespace (required)
     * @param  string $name Preview name (required)
     * @param  int $width Preview image width (required)
     * @param  int $height Preview image height (required)
     * @param  int $surface_index Design surface index  Indicates which design surface should be used as a source for preview (optional)
     * @param  bool $stub Design Preview stub contnent switcher  Indicates whether to show stub content in preview (optional)
     * @param  \Aurigma\AssetProcessor\Model\DesignPreviewFormat $format Design preview image format (optional)
     * @param  bool $force If set to &#39;true&#39;, new preview prepared, even if preview already existed (optional, default to false)
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function designProcessorPreparePreviewAsyncWithHttpInfo($id, $namespace, $name, $width, $height, $surface_index = null, $stub = null, $format = null, $force = false, $tenant_id = null)
    {
        $returnType = '\SplFileObject';
        $request = $this->designProcessorPreparePreviewRequest($id, $namespace, $name, $width, $height, $surface_index, $stub, $format, $force, $tenant_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'designProcessorPreparePreview'
     *
     * @param  string $id Source design entity identifier (required)
     * @param  string $namespace Preview namespace (required)
     * @param  string $name Preview name (required)
     * @param  int $width Preview image width (required)
     * @param  int $height Preview image height (required)
     * @param  int $surface_index Design surface index  Indicates which design surface should be used as a source for preview (optional)
     * @param  bool $stub Design Preview stub contnent switcher  Indicates whether to show stub content in preview (optional)
     * @param  \Aurigma\AssetProcessor\Model\DesignPreviewFormat $format Design preview image format (optional)
     * @param  bool $force If set to &#39;true&#39;, new preview prepared, even if preview already existed (optional, default to false)
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function designProcessorPreparePreviewRequest($id, $namespace, $name, $width, $height, $surface_index = null, $stub = null, $format = null, $force = false, $tenant_id = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling designProcessorPreparePreview'
            );
        }
        // verify the required parameter 'namespace' is set
        if ($namespace === null || (is_array($namespace) && count($namespace) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $namespace when calling designProcessorPreparePreview'
            );
        }
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling designProcessorPreparePreview'
            );
        }
        // verify the required parameter 'width' is set
        if ($width === null || (is_array($width) && count($width) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $width when calling designProcessorPreparePreview'
            );
        }
        // verify the required parameter 'height' is set
        if ($height === null || (is_array($height) && count($height) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $height when calling designProcessorPreparePreview'
            );
        }

        $resourcePath = '/api/processor/v1/designs/{id}/preview/{namespace}/{name}/{width}x{height}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($surface_index !== null) {
            if('form' === 'form' && is_array($surface_index)) {
                foreach($surface_index as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['surfaceIndex'] = $surface_index;
            }
        }
        // query params
        if ($stub !== null) {
            if('form' === 'form' && is_array($stub)) {
                foreach($stub as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['stub'] = $stub;
            }
        }
        // query params
        if ($format !== null) {
            if('form' === 'form' && is_array($format)) {
                foreach($format as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['format'] = $format;
            }
        }
        // query params
        if ($force !== null) {
            if('form' === 'form' && is_array($force)) {
                foreach($force as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['force'] = $force;
            }
        }
        // query params
        if ($tenant_id !== null) {
            if('form' === 'form' && is_array($tenant_id)) {
                foreach($tenant_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tenantId'] = $tenant_id;
            }
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($namespace !== null) {
            $resourcePath = str_replace(
                '{' . 'namespace' . '}',
                ObjectSerializer::toPathValue($namespace),
                $resourcePath
            );
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($width !== null) {
            $resourcePath = str_replace(
                '{' . 'width' . '}',
                ObjectSerializer::toPathValue($width),
                $resourcePath
            );
        }
        // path params
        if ($height !== null) {
            $resourcePath = str_replace(
                '{' . 'height' . '}',
                ObjectSerializer::toPathValue($height),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/octet-stream']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/octet-stream'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        // aurigmafix 6
                        if (gettype($formParamValueItem) === 'object') {
                            if (!($formParamValueItem instanceof StreamInterface 
                            || $formParamValueItem instanceof \Iterator 
                            || method_exists($formParamValueItem, '__toString'))) {
                                $formParamValueItem = json_encode($formParamValueItem);
                            }
                        } 
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation designProcessorPreparePreviewUrl
     *
     * Creates preview image for design taken from storage.
     *
     * @param  string $id Source design entity identifier (required)
     * @param  string $namespace Preview namespace (required)
     * @param  string $name Preview name (required)
     * @param  int $width Preview image width (required)
     * @param  int $height Preview image height (required)
     * @param  int $surface_index Design surface index  Indicates which design surface should be used as a source for preview (optional)
     * @param  bool $stub Design Preview stub contnent switcher  Indicates whether to show stub content in preview (optional)
     * @param  \Aurigma\AssetProcessor\Model\DesignPreviewFormat $format Design preview image format (optional)
     * @param  bool $force If set to &#39;true&#39;, new preview prepared, even if preview already existed (optional, default to false)
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \Aurigma\AssetProcessor\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string|\Aurigma\AssetProcessor\Model\ProblemDetails
     */
    public function designProcessorPreparePreviewUrl($id, $namespace, $name, $width, $height, $surface_index = null, $stub = null, $format = null, $force = false, $tenant_id = null)
    {
        list($response) = $this->designProcessorPreparePreviewUrlWithHttpInfo($id, $namespace, $name, $width, $height, $surface_index, $stub, $format, $force, $tenant_id);
        return $response;
    }

    /**
     * Operation designProcessorPreparePreviewUrlWithHttpInfo
     *
     * Creates preview image for design taken from storage.
     *
     * @param  string $id Source design entity identifier (required)
     * @param  string $namespace Preview namespace (required)
     * @param  string $name Preview name (required)
     * @param  int $width Preview image width (required)
     * @param  int $height Preview image height (required)
     * @param  int $surface_index Design surface index  Indicates which design surface should be used as a source for preview (optional)
     * @param  bool $stub Design Preview stub contnent switcher  Indicates whether to show stub content in preview (optional)
     * @param  \Aurigma\AssetProcessor\Model\DesignPreviewFormat $format Design preview image format (optional)
     * @param  bool $force If set to &#39;true&#39;, new preview prepared, even if preview already existed (optional, default to false)
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \Aurigma\AssetProcessor\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string|\Aurigma\AssetProcessor\Model\ProblemDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function designProcessorPreparePreviewUrlWithHttpInfo($id, $namespace, $name, $width, $height, $surface_index = null, $stub = null, $format = null, $force = false, $tenant_id = null)
    {
        $request = $this->designProcessorPreparePreviewUrlRequest($id, $namespace, $name, $width, $height, $surface_index, $stub, $format, $force, $tenant_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Aurigma\AssetProcessor\Model\ProblemDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\AssetProcessor\Model\ProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\AssetProcessor\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation designProcessorPreparePreviewUrlAsync
     *
     * Creates preview image for design taken from storage.
     *
     * @param  string $id Source design entity identifier (required)
     * @param  string $namespace Preview namespace (required)
     * @param  string $name Preview name (required)
     * @param  int $width Preview image width (required)
     * @param  int $height Preview image height (required)
     * @param  int $surface_index Design surface index  Indicates which design surface should be used as a source for preview (optional)
     * @param  bool $stub Design Preview stub contnent switcher  Indicates whether to show stub content in preview (optional)
     * @param  \Aurigma\AssetProcessor\Model\DesignPreviewFormat $format Design preview image format (optional)
     * @param  bool $force If set to &#39;true&#39;, new preview prepared, even if preview already existed (optional, default to false)
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function designProcessorPreparePreviewUrlAsync($id, $namespace, $name, $width, $height, $surface_index = null, $stub = null, $format = null, $force = false, $tenant_id = null)
    {
        return $this->designProcessorPreparePreviewUrlAsyncWithHttpInfo($id, $namespace, $name, $width, $height, $surface_index, $stub, $format, $force, $tenant_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation designProcessorPreparePreviewUrlAsyncWithHttpInfo
     *
     * Creates preview image for design taken from storage.
     *
     * @param  string $id Source design entity identifier (required)
     * @param  string $namespace Preview namespace (required)
     * @param  string $name Preview name (required)
     * @param  int $width Preview image width (required)
     * @param  int $height Preview image height (required)
     * @param  int $surface_index Design surface index  Indicates which design surface should be used as a source for preview (optional)
     * @param  bool $stub Design Preview stub contnent switcher  Indicates whether to show stub content in preview (optional)
     * @param  \Aurigma\AssetProcessor\Model\DesignPreviewFormat $format Design preview image format (optional)
     * @param  bool $force If set to &#39;true&#39;, new preview prepared, even if preview already existed (optional, default to false)
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function designProcessorPreparePreviewUrlAsyncWithHttpInfo($id, $namespace, $name, $width, $height, $surface_index = null, $stub = null, $format = null, $force = false, $tenant_id = null)
    {
        $returnType = 'string';
        $request = $this->designProcessorPreparePreviewUrlRequest($id, $namespace, $name, $width, $height, $surface_index, $stub, $format, $force, $tenant_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'designProcessorPreparePreviewUrl'
     *
     * @param  string $id Source design entity identifier (required)
     * @param  string $namespace Preview namespace (required)
     * @param  string $name Preview name (required)
     * @param  int $width Preview image width (required)
     * @param  int $height Preview image height (required)
     * @param  int $surface_index Design surface index  Indicates which design surface should be used as a source for preview (optional)
     * @param  bool $stub Design Preview stub contnent switcher  Indicates whether to show stub content in preview (optional)
     * @param  \Aurigma\AssetProcessor\Model\DesignPreviewFormat $format Design preview image format (optional)
     * @param  bool $force If set to &#39;true&#39;, new preview prepared, even if preview already existed (optional, default to false)
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function designProcessorPreparePreviewUrlRequest($id, $namespace, $name, $width, $height, $surface_index = null, $stub = null, $format = null, $force = false, $tenant_id = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling designProcessorPreparePreviewUrl'
            );
        }
        // verify the required parameter 'namespace' is set
        if ($namespace === null || (is_array($namespace) && count($namespace) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $namespace when calling designProcessorPreparePreviewUrl'
            );
        }
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling designProcessorPreparePreviewUrl'
            );
        }
        // verify the required parameter 'width' is set
        if ($width === null || (is_array($width) && count($width) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $width when calling designProcessorPreparePreviewUrl'
            );
        }
        // verify the required parameter 'height' is set
        if ($height === null || (is_array($height) && count($height) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $height when calling designProcessorPreparePreviewUrl'
            );
        }

        $resourcePath = '/api/processor/v1/designs/{id}/preview/{namespace}/{name}/{width}x{height}/url';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($surface_index !== null) {
            if('form' === 'form' && is_array($surface_index)) {
                foreach($surface_index as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['surfaceIndex'] = $surface_index;
            }
        }
        // query params
        if ($stub !== null) {
            if('form' === 'form' && is_array($stub)) {
                foreach($stub as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['stub'] = $stub;
            }
        }
        // query params
        if ($format !== null) {
            if('form' === 'form' && is_array($format)) {
                foreach($format as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['format'] = $format;
            }
        }
        // query params
        if ($force !== null) {
            if('form' === 'form' && is_array($force)) {
                foreach($force as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['force'] = $force;
            }
        }
        // query params
        if ($tenant_id !== null) {
            if('form' === 'form' && is_array($tenant_id)) {
                foreach($tenant_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tenantId'] = $tenant_id;
            }
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($namespace !== null) {
            $resourcePath = str_replace(
                '{' . 'namespace' . '}',
                ObjectSerializer::toPathValue($namespace),
                $resourcePath
            );
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($width !== null) {
            $resourcePath = str_replace(
                '{' . 'width' . '}',
                ObjectSerializer::toPathValue($width),
                $resourcePath
            );
        }
        // path params
        if ($height !== null) {
            $resourcePath = str_replace(
                '{' . 'height' . '}',
                ObjectSerializer::toPathValue($height),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        // aurigmafix 6
                        if (gettype($formParamValueItem) === 'object') {
                            if (!($formParamValueItem instanceof StreamInterface 
                            || $formParamValueItem instanceof \Iterator 
                            || method_exists($formParamValueItem, '__toString'))) {
                                $formParamValueItem = json_encode($formParamValueItem);
                            }
                        } 
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation designProcessorRemoveDataSchema
     *
     * Removes data schema from the design file
     *
     * @param  string $id Design entity unique identifier (required)
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \Aurigma\AssetProcessor\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aurigma\AssetProcessor\Model\DesignDto|\Aurigma\AssetProcessor\Model\ProblemDetails
     */
    public function designProcessorRemoveDataSchema($id, $tenant_id = null)
    {
        list($response) = $this->designProcessorRemoveDataSchemaWithHttpInfo($id, $tenant_id);
        return $response;
    }

    /**
     * Operation designProcessorRemoveDataSchemaWithHttpInfo
     *
     * Removes data schema from the design file
     *
     * @param  string $id Design entity unique identifier (required)
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \Aurigma\AssetProcessor\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aurigma\AssetProcessor\Model\DesignDto|\Aurigma\AssetProcessor\Model\ProblemDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function designProcessorRemoveDataSchemaWithHttpInfo($id, $tenant_id = null)
    {
        $request = $this->designProcessorRemoveDataSchemaRequest($id, $tenant_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Aurigma\AssetProcessor\Model\DesignDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\AssetProcessor\Model\DesignDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Aurigma\AssetProcessor\Model\ProblemDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\AssetProcessor\Model\ProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Aurigma\AssetProcessor\Model\DesignDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\AssetProcessor\Model\DesignDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\AssetProcessor\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation designProcessorRemoveDataSchemaAsync
     *
     * Removes data schema from the design file
     *
     * @param  string $id Design entity unique identifier (required)
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function designProcessorRemoveDataSchemaAsync($id, $tenant_id = null)
    {
        return $this->designProcessorRemoveDataSchemaAsyncWithHttpInfo($id, $tenant_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation designProcessorRemoveDataSchemaAsyncWithHttpInfo
     *
     * Removes data schema from the design file
     *
     * @param  string $id Design entity unique identifier (required)
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function designProcessorRemoveDataSchemaAsyncWithHttpInfo($id, $tenant_id = null)
    {
        $returnType = '\Aurigma\AssetProcessor\Model\DesignDto';
        $request = $this->designProcessorRemoveDataSchemaRequest($id, $tenant_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'designProcessorRemoveDataSchema'
     *
     * @param  string $id Design entity unique identifier (required)
     * @param  int $tenant_id Tenant identifier (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function designProcessorRemoveDataSchemaRequest($id, $tenant_id = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling designProcessorRemoveDataSchema'
            );
        }

        $resourcePath = '/api/processor/v1/designs/{id}/schema/remove';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($tenant_id !== null) {
            if('form' === 'form' && is_array($tenant_id)) {
                foreach($tenant_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tenantId'] = $tenant_id;
            }
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        // aurigmafix 6
                        if (gettype($formParamValueItem) === 'object') {
                            if (!($formParamValueItem instanceof StreamInterface 
                            || $formParamValueItem instanceof \Iterator 
                            || method_exists($formParamValueItem, '__toString'))) {
                                $formParamValueItem = json_encode($formParamValueItem);
                            }
                        } 
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation designProcessorUpdate
     *
     * Updates design file and metadata in storage
     *
     * @param  string $id Design entity unique identifier (required)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $design_params_name Design name (optional)
     * @param  string $design_params_path Design location (folder path) (optional)
     * @param  mixed $design_params_custom_fields design_params_custom_fields (optional)
     * @param  \SplFileObject $file Design source file (optional)
     *
     * @throws \Aurigma\AssetProcessor\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aurigma\AssetProcessor\Model\DesignDto|\Aurigma\AssetProcessor\Model\ProblemDetails
     */
    public function designProcessorUpdate($id, $tenant_id = null, $design_params_name = null, $design_params_path = null, $design_params_custom_fields = null, $file = null)
    {
        list($response) = $this->designProcessorUpdateWithHttpInfo($id, $tenant_id, $design_params_name, $design_params_path, $design_params_custom_fields, $file);
        return $response;
    }

    /**
     * Operation designProcessorUpdateWithHttpInfo
     *
     * Updates design file and metadata in storage
     *
     * @param  string $id Design entity unique identifier (required)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $design_params_name Design name (optional)
     * @param  string $design_params_path Design location (folder path) (optional)
     * @param  mixed $design_params_custom_fields (optional)
     * @param  \SplFileObject $file Design source file (optional)
     *
     * @throws \Aurigma\AssetProcessor\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aurigma\AssetProcessor\Model\DesignDto|\Aurigma\AssetProcessor\Model\ProblemDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function designProcessorUpdateWithHttpInfo($id, $tenant_id = null, $design_params_name = null, $design_params_path = null, $design_params_custom_fields = null, $file = null)
    {
        $request = $this->designProcessorUpdateRequest($id, $tenant_id, $design_params_name, $design_params_path, $design_params_custom_fields, $file);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Aurigma\AssetProcessor\Model\DesignDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\AssetProcessor\Model\DesignDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Aurigma\AssetProcessor\Model\ProblemDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\AssetProcessor\Model\ProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Aurigma\AssetProcessor\Model\DesignDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\AssetProcessor\Model\DesignDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\AssetProcessor\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation designProcessorUpdateAsync
     *
     * Updates design file and metadata in storage
     *
     * @param  string $id Design entity unique identifier (required)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $design_params_name Design name (optional)
     * @param  string $design_params_path Design location (folder path) (optional)
     * @param  mixed $design_params_custom_fields (optional)
     * @param  \SplFileObject $file Design source file (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function designProcessorUpdateAsync($id, $tenant_id = null, $design_params_name = null, $design_params_path = null, $design_params_custom_fields = null, $file = null)
    {
        return $this->designProcessorUpdateAsyncWithHttpInfo($id, $tenant_id, $design_params_name, $design_params_path, $design_params_custom_fields, $file)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation designProcessorUpdateAsyncWithHttpInfo
     *
     * Updates design file and metadata in storage
     *
     * @param  string $id Design entity unique identifier (required)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $design_params_name Design name (optional)
     * @param  string $design_params_path Design location (folder path) (optional)
     * @param  mixed $design_params_custom_fields (optional)
     * @param  \SplFileObject $file Design source file (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function designProcessorUpdateAsyncWithHttpInfo($id, $tenant_id = null, $design_params_name = null, $design_params_path = null, $design_params_custom_fields = null, $file = null)
    {
        $returnType = '\Aurigma\AssetProcessor\Model\DesignDto';
        $request = $this->designProcessorUpdateRequest($id, $tenant_id, $design_params_name, $design_params_path, $design_params_custom_fields, $file);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'designProcessorUpdate'
     *
     * @param  string $id Design entity unique identifier (required)
     * @param  int $tenant_id Tenant identifier (optional)
     * @param  string $design_params_name Design name (optional)
     * @param  string $design_params_path Design location (folder path) (optional)
     * @param  mixed $design_params_custom_fields (optional)
     * @param  \SplFileObject $file Design source file (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function designProcessorUpdateRequest($id, $tenant_id = null, $design_params_name = null, $design_params_path = null, $design_params_custom_fields = null, $file = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling designProcessorUpdate'
            );
        }
        if ($design_params_name !== null && !preg_match("/[^\/:*?\"<>|]*/", $design_params_name)) {
            throw new \InvalidArgumentException("invalid value for \"design_params_name\" when calling DesignProcessorApi.designProcessorUpdate, must conform to the pattern /[^\/:*?\"<>|]*/.");
        }


        $resourcePath = '/api/processor/v1/designs/{id}/update';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($tenant_id !== null) {
            if('form' === 'form' && is_array($tenant_id)) {
                foreach($tenant_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tenantId'] = $tenant_id;
            }
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // form params
        if ($design_params_name !== null) {
            $formParams['designParams.name'] = ObjectSerializer::toFormValue($design_params_name);
        }
        // form params
        if ($design_params_path !== null) {
            $formParams['designParams.path'] = ObjectSerializer::toFormValue($design_params_path);
        }
        // form params
        if ($design_params_custom_fields !== null) {
            $formParams['designParams.customFields'] = ObjectSerializer::toFormValue($design_params_custom_fields);
        }
        // aurigmafix 5
        $multipart = true;
        // form params
        if ($file !== null) {
            $multipart = true;
            $formParams['file'] = [];
            $paramFiles = is_array($file) ? $file : [$file];
            foreach ($paramFiles as $paramFile) {
                $formParams['file'][] = \GuzzleHttp\Psr7\try_fopen(
                    ObjectSerializer::toFormValue($paramFile),
                    'rb'
                );
            }
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        // aurigmafix 6
                        if (gettype($formParamValueItem) === 'object') {
                            if (!($formParamValueItem instanceof StreamInterface 
                            || $formParamValueItem instanceof \Iterator 
                            || method_exists($formParamValueItem, '__toString'))) {
                                $formParamValueItem = json_encode($formParamValueItem);
                            }
                        } 
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
